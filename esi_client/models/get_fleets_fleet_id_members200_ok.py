# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetFleetsFleetIdMembers200Ok(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    character_id: StrictInt = Field(description="character_id integer")
    join_time: datetime = Field(description="join_time string")
    role: StrictStr = Field(description="Memberâ€™s role in fleet")
    role_name: StrictStr = Field(description="Localized role names")
    ship_type_id: StrictInt = Field(description="ship_type_id integer")
    solar_system_id: StrictInt = Field(description="Solar system the member is located in")
    squad_id: StrictInt = Field(description="ID of the squad the member is in. If not applicable, will be set to -1")
    station_id: Optional[StrictInt] = Field(default=None, description="Station in which the member is docked in, if applicable")
    takes_fleet_warp: StrictBool = Field(description="Whether the member take fleet warps")
    wing_id: StrictInt = Field(description="ID of the wing the member is in. If not applicable, will be set to -1")
    __properties: ClassVar[List[str]] = ["character_id", "join_time", "role", "role_name", "ship_type_id", "solar_system_id", "squad_id", "station_id", "takes_fleet_warp", "wing_id"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('fleet_commander', 'wing_commander', 'squad_commander', 'squad_member'):
            raise ValueError("must be one of enum values ('fleet_commander', 'wing_commander', 'squad_commander', 'squad_member')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetFleetsFleetIdMembers200Ok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetFleetsFleetIdMembers200Ok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "character_id": obj.get("character_id"),
            "join_time": obj.get("join_time"),
            "role": obj.get("role"),
            "role_name": obj.get("role_name"),
            "ship_type_id": obj.get("ship_type_id"),
            "solar_system_id": obj.get("solar_system_id"),
            "squad_id": obj.get("squad_id"),
            "station_id": obj.get("station_id"),
            "takes_fleet_warp": obj.get("takes_fleet_warp"),
            "wing_id": obj.get("wing_id")
        })
        return _obj


