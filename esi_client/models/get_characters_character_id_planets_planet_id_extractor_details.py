# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.get_characters_character_id_planets_planet_id_head import GetCharactersCharacterIdPlanetsPlanetIdHead
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails(BaseModel):
    """
    extractor_details object
    """ # noqa: E501
    cycle_time: Optional[StrictInt] = Field(default=None, description="in seconds")
    head_radius: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="head_radius number")
    heads: Annotated[List[GetCharactersCharacterIdPlanetsPlanetIdHead], Field(max_length=10)] = Field(description="heads array")
    product_type_id: Optional[StrictInt] = Field(default=None, description="product_type_id integer")
    qty_per_cycle: Optional[StrictInt] = Field(default=None, description="qty_per_cycle integer")
    __properties: ClassVar[List[str]] = ["cycle_time", "head_radius", "heads", "product_type_id", "qty_per_cycle"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in heads (list)
        _items = []
        if self.heads:
            for _item in self.heads:
                if _item:
                    _items.append(_item.to_dict())
            _dict['heads'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cycle_time": obj.get("cycle_time"),
            "head_radius": obj.get("head_radius"),
            "heads": [GetCharactersCharacterIdPlanetsPlanetIdHead.from_dict(_item) for _item in obj.get("heads")] if obj.get("heads") is not None else None,
            "product_type_id": obj.get("product_type_id"),
            "qty_per_cycle": obj.get("qty_per_cycle")
        })
        return _obj


