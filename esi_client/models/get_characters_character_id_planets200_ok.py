# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCharactersCharacterIdPlanets200Ok(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    last_update: datetime = Field(description="last_update string")
    num_pins: Annotated[int, Field(strict=True, ge=1)] = Field(description="num_pins integer")
    owner_id: StrictInt = Field(description="owner_id integer")
    planet_id: StrictInt = Field(description="planet_id integer")
    planet_type: StrictStr = Field(description="planet_type string")
    solar_system_id: StrictInt = Field(description="solar_system_id integer")
    upgrade_level: Annotated[int, Field(le=5, strict=True, ge=0)] = Field(description="upgrade_level integer")
    __properties: ClassVar[List[str]] = ["last_update", "num_pins", "owner_id", "planet_id", "planet_type", "solar_system_id", "upgrade_level"]

    @field_validator('planet_type')
    def planet_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('temperate', 'barren', 'oceanic', 'ice', 'gas', 'lava', 'storm', 'plasma'):
            raise ValueError("must be one of enum values ('temperate', 'barren', 'oceanic', 'ice', 'gas', 'lava', 'storm', 'plasma')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCharactersCharacterIdPlanets200Ok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCharactersCharacterIdPlanets200Ok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "last_update": obj.get("last_update"),
            "num_pins": obj.get("num_pins"),
            "owner_id": obj.get("owner_id"),
            "planet_id": obj.get("planet_id"),
            "planet_type": obj.get("planet_type"),
            "solar_system_id": obj.get("solar_system_id"),
            "upgrade_level": obj.get("upgrade_level")
        })
        return _obj


