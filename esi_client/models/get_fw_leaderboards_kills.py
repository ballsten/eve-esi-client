# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.get_fw_leaderboards_active_total_active_total import GetFwLeaderboardsActiveTotalActiveTotal
from esi_client.models.get_fw_leaderboards_last_week_last_week import GetFwLeaderboardsLastWeekLastWeek
from esi_client.models.get_fw_leaderboards_yesterday_yesterday import GetFwLeaderboardsYesterdayYesterday
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetFwLeaderboardsKills(BaseModel):
    """
    Top 4 rankings of factions by number of kills from yesterday, last week and in total
    """ # noqa: E501
    active_total: Annotated[List[GetFwLeaderboardsActiveTotalActiveTotal], Field(max_length=4)] = Field(description="Top 4 ranking of factions active in faction warfare by total kills. A faction is considered \"active\" if they have participated in faction warfare in the past 14 days")
    last_week: Annotated[List[GetFwLeaderboardsLastWeekLastWeek], Field(max_length=4)] = Field(description="Top 4 ranking of factions by kills in the past week")
    yesterday: Annotated[List[GetFwLeaderboardsYesterdayYesterday], Field(max_length=4)] = Field(description="Top 4 ranking of factions by kills in the past day")
    __properties: ClassVar[List[str]] = ["active_total", "last_week", "yesterday"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetFwLeaderboardsKills from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_total (list)
        _items = []
        if self.active_total:
            for _item in self.active_total:
                if _item:
                    _items.append(_item.to_dict())
            _dict['active_total'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in last_week (list)
        _items = []
        if self.last_week:
            for _item in self.last_week:
                if _item:
                    _items.append(_item.to_dict())
            _dict['last_week'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in yesterday (list)
        _items = []
        if self.yesterday:
            for _item in self.yesterday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['yesterday'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetFwLeaderboardsKills from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_total": [GetFwLeaderboardsActiveTotalActiveTotal.from_dict(_item) for _item in obj.get("active_total")] if obj.get("active_total") is not None else None,
            "last_week": [GetFwLeaderboardsLastWeekLastWeek.from_dict(_item) for _item in obj.get("last_week")] if obj.get("last_week") is not None else None,
            "yesterday": [GetFwLeaderboardsYesterdayYesterday.from_dict(_item) for _item in obj.get("yesterday")] if obj.get("yesterday") is not None else None
        })
        return _obj


