# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetDogmaAttributesAttributeIdOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    attribute_id: StrictInt = Field(description="attribute_id integer")
    default_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="default_value number")
    description: Optional[StrictStr] = Field(default=None, description="description string")
    display_name: Optional[StrictStr] = Field(default=None, description="display_name string")
    high_is_good: Optional[StrictBool] = Field(default=None, description="high_is_good boolean")
    icon_id: Optional[StrictInt] = Field(default=None, description="icon_id integer")
    name: Optional[StrictStr] = Field(default=None, description="name string")
    published: Optional[StrictBool] = Field(default=None, description="published boolean")
    stackable: Optional[StrictBool] = Field(default=None, description="stackable boolean")
    unit_id: Optional[StrictInt] = Field(default=None, description="unit_id integer")
    __properties: ClassVar[List[str]] = ["attribute_id", "default_value", "description", "display_name", "high_is_good", "icon_id", "name", "published", "stackable", "unit_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetDogmaAttributesAttributeIdOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetDogmaAttributesAttributeIdOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attribute_id": obj.get("attribute_id"),
            "default_value": obj.get("default_value"),
            "description": obj.get("description"),
            "display_name": obj.get("display_name"),
            "high_is_good": obj.get("high_is_good"),
            "icon_id": obj.get("icon_id"),
            "name": obj.get("name"),
            "published": obj.get("published"),
            "stackable": obj.get("stackable"),
            "unit_id": obj.get("unit_id")
        })
        return _obj


