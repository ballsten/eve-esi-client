# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCorporationsCorporationIdMedalsIssued200Ok(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    character_id: StrictInt = Field(description="ID of the character who was rewarded this medal")
    issued_at: datetime = Field(description="issued_at string")
    issuer_id: StrictInt = Field(description="ID of the character who issued the medal")
    medal_id: StrictInt = Field(description="medal_id integer")
    reason: Annotated[str, Field(strict=True, max_length=1000)] = Field(description="reason string")
    status: StrictStr = Field(description="status string")
    __properties: ClassVar[List[str]] = ["character_id", "issued_at", "issuer_id", "medal_id", "reason", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('private', 'public'):
            raise ValueError("must be one of enum values ('private', 'public')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCorporationsCorporationIdMedalsIssued200Ok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCorporationsCorporationIdMedalsIssued200Ok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "character_id": obj.get("character_id"),
            "issued_at": obj.get("issued_at"),
            "issuer_id": obj.get("issuer_id"),
            "medal_id": obj.get("medal_id"),
            "reason": obj.get("reason"),
            "status": obj.get("status")
        })
        return _obj


