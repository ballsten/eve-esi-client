# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetUniverseFactions200Ok(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    corporation_id: Optional[StrictInt] = Field(default=None, description="corporation_id integer")
    description: StrictStr = Field(description="description string")
    faction_id: StrictInt = Field(description="faction_id integer")
    is_unique: StrictBool = Field(description="is_unique boolean")
    militia_corporation_id: Optional[StrictInt] = Field(default=None, description="militia_corporation_id integer")
    name: StrictStr = Field(description="name string")
    size_factor: Union[StrictFloat, StrictInt] = Field(description="size_factor number")
    solar_system_id: Optional[StrictInt] = Field(default=None, description="solar_system_id integer")
    station_count: StrictInt = Field(description="station_count integer")
    station_system_count: StrictInt = Field(description="station_system_count integer")
    __properties: ClassVar[List[str]] = ["corporation_id", "description", "faction_id", "is_unique", "militia_corporation_id", "name", "size_factor", "solar_system_id", "station_count", "station_system_count"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetUniverseFactions200Ok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetUniverseFactions200Ok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "corporation_id": obj.get("corporation_id"),
            "description": obj.get("description"),
            "faction_id": obj.get("faction_id"),
            "is_unique": obj.get("is_unique"),
            "militia_corporation_id": obj.get("militia_corporation_id"),
            "name": obj.get("name"),
            "size_factor": obj.get("size_factor"),
            "solar_system_id": obj.get("solar_system_id"),
            "station_count": obj.get("station_count"),
            "station_system_count": obj.get("station_system_count")
        })
        return _obj


