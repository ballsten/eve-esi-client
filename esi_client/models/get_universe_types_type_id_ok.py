# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.get_universe_types_type_id_dogma_attribute import GetUniverseTypesTypeIdDogmaAttribute
from esi_client.models.get_universe_types_type_id_dogma_effect import GetUniverseTypesTypeIdDogmaEffect
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetUniverseTypesTypeIdOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="capacity number")
    description: StrictStr = Field(description="description string")
    dogma_attributes: Optional[Annotated[List[GetUniverseTypesTypeIdDogmaAttribute], Field(max_length=1000)]] = Field(default=None, description="dogma_attributes array")
    dogma_effects: Optional[Annotated[List[GetUniverseTypesTypeIdDogmaEffect], Field(max_length=1000)]] = Field(default=None, description="dogma_effects array")
    graphic_id: Optional[StrictInt] = Field(default=None, description="graphic_id integer")
    group_id: StrictInt = Field(description="group_id integer")
    icon_id: Optional[StrictInt] = Field(default=None, description="icon_id integer")
    market_group_id: Optional[StrictInt] = Field(default=None, description="This only exists for types that can be put on the market")
    mass: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="mass number")
    name: StrictStr = Field(description="name string")
    packaged_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="packaged_volume number")
    portion_size: Optional[StrictInt] = Field(default=None, description="portion_size integer")
    published: StrictBool = Field(description="published boolean")
    radius: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="radius number")
    type_id: StrictInt = Field(description="type_id integer")
    volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="volume number")
    __properties: ClassVar[List[str]] = ["capacity", "description", "dogma_attributes", "dogma_effects", "graphic_id", "group_id", "icon_id", "market_group_id", "mass", "name", "packaged_volume", "portion_size", "published", "radius", "type_id", "volume"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetUniverseTypesTypeIdOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dogma_attributes (list)
        _items = []
        if self.dogma_attributes:
            for _item in self.dogma_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dogma_attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dogma_effects (list)
        _items = []
        if self.dogma_effects:
            for _item in self.dogma_effects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dogma_effects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetUniverseTypesTypeIdOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capacity": obj.get("capacity"),
            "description": obj.get("description"),
            "dogma_attributes": [GetUniverseTypesTypeIdDogmaAttribute.from_dict(_item) for _item in obj.get("dogma_attributes")] if obj.get("dogma_attributes") is not None else None,
            "dogma_effects": [GetUniverseTypesTypeIdDogmaEffect.from_dict(_item) for _item in obj.get("dogma_effects")] if obj.get("dogma_effects") is not None else None,
            "graphic_id": obj.get("graphic_id"),
            "group_id": obj.get("group_id"),
            "icon_id": obj.get("icon_id"),
            "market_group_id": obj.get("market_group_id"),
            "mass": obj.get("mass"),
            "name": obj.get("name"),
            "packaged_volume": obj.get("packaged_volume"),
            "portion_size": obj.get("portion_size"),
            "published": obj.get("published"),
            "radius": obj.get("radius"),
            "type_id": obj.get("type_id"),
            "volume": obj.get("volume")
        })
        return _obj


