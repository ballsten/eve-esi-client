# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.post_universe_ids_agent import PostUniverseIdsAgent
from esi_client.models.post_universe_ids_alliance import PostUniverseIdsAlliance
from esi_client.models.post_universe_ids_character import PostUniverseIdsCharacter
from esi_client.models.post_universe_ids_constellation import PostUniverseIdsConstellation
from esi_client.models.post_universe_ids_corporation import PostUniverseIdsCorporation
from esi_client.models.post_universe_ids_faction import PostUniverseIdsFaction
from esi_client.models.post_universe_ids_inventory_type import PostUniverseIdsInventoryType
from esi_client.models.post_universe_ids_region import PostUniverseIdsRegion
from esi_client.models.post_universe_ids_station import PostUniverseIdsStation
from esi_client.models.post_universe_ids_system import PostUniverseIdsSystem
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PostUniverseIdsOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    agents: Optional[Annotated[List[PostUniverseIdsAgent], Field(max_length=500)]] = Field(default=None, description="agents array")
    alliances: Optional[Annotated[List[PostUniverseIdsAlliance], Field(max_length=500)]] = Field(default=None, description="alliances array")
    characters: Optional[Annotated[List[PostUniverseIdsCharacter], Field(max_length=500)]] = Field(default=None, description="characters array")
    constellations: Optional[Annotated[List[PostUniverseIdsConstellation], Field(max_length=500)]] = Field(default=None, description="constellations array")
    corporations: Optional[Annotated[List[PostUniverseIdsCorporation], Field(max_length=500)]] = Field(default=None, description="corporations array")
    factions: Optional[Annotated[List[PostUniverseIdsFaction], Field(max_length=500)]] = Field(default=None, description="factions array")
    inventory_types: Optional[Annotated[List[PostUniverseIdsInventoryType], Field(max_length=500)]] = Field(default=None, description="inventory_types array")
    regions: Optional[Annotated[List[PostUniverseIdsRegion], Field(max_length=500)]] = Field(default=None, description="regions array")
    stations: Optional[Annotated[List[PostUniverseIdsStation], Field(max_length=500)]] = Field(default=None, description="stations array")
    systems: Optional[Annotated[List[PostUniverseIdsSystem], Field(max_length=500)]] = Field(default=None, description="systems array")
    __properties: ClassVar[List[str]] = ["agents", "alliances", "characters", "constellations", "corporations", "factions", "inventory_types", "regions", "stations", "systems"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PostUniverseIdsOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in agents (list)
        _items = []
        if self.agents:
            for _item in self.agents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['agents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in alliances (list)
        _items = []
        if self.alliances:
            for _item in self.alliances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['alliances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in characters (list)
        _items = []
        if self.characters:
            for _item in self.characters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['characters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constellations (list)
        _items = []
        if self.constellations:
            for _item in self.constellations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constellations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in corporations (list)
        _items = []
        if self.corporations:
            for _item in self.corporations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['corporations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in factions (list)
        _items = []
        if self.factions:
            for _item in self.factions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['factions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inventory_types (list)
        _items = []
        if self.inventory_types:
            for _item in self.inventory_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inventory_types'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regions (list)
        _items = []
        if self.regions:
            for _item in self.regions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['regions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stations (list)
        _items = []
        if self.stations:
            for _item in self.stations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in systems (list)
        _items = []
        if self.systems:
            for _item in self.systems:
                if _item:
                    _items.append(_item.to_dict())
            _dict['systems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PostUniverseIdsOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agents": [PostUniverseIdsAgent.from_dict(_item) for _item in obj.get("agents")] if obj.get("agents") is not None else None,
            "alliances": [PostUniverseIdsAlliance.from_dict(_item) for _item in obj.get("alliances")] if obj.get("alliances") is not None else None,
            "characters": [PostUniverseIdsCharacter.from_dict(_item) for _item in obj.get("characters")] if obj.get("characters") is not None else None,
            "constellations": [PostUniverseIdsConstellation.from_dict(_item) for _item in obj.get("constellations")] if obj.get("constellations") is not None else None,
            "corporations": [PostUniverseIdsCorporation.from_dict(_item) for _item in obj.get("corporations")] if obj.get("corporations") is not None else None,
            "factions": [PostUniverseIdsFaction.from_dict(_item) for _item in obj.get("factions")] if obj.get("factions") is not None else None,
            "inventory_types": [PostUniverseIdsInventoryType.from_dict(_item) for _item in obj.get("inventory_types")] if obj.get("inventory_types") is not None else None,
            "regions": [PostUniverseIdsRegion.from_dict(_item) for _item in obj.get("regions")] if obj.get("regions") is not None else None,
            "stations": [PostUniverseIdsStation.from_dict(_item) for _item in obj.get("stations")] if obj.get("stations") is not None else None,
            "systems": [PostUniverseIdsSystem.from_dict(_item) for _item in obj.get("systems")] if obj.get("systems") is not None else None
        })
        return _obj


