# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetFwSystems200Ok(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    contested: StrictStr = Field(description="contested string")
    occupier_faction_id: StrictInt = Field(description="occupier_faction_id integer")
    owner_faction_id: StrictInt = Field(description="owner_faction_id integer")
    solar_system_id: StrictInt = Field(description="solar_system_id integer")
    victory_points: StrictInt = Field(description="victory_points integer")
    victory_points_threshold: StrictInt = Field(description="victory_points_threshold integer")
    __properties: ClassVar[List[str]] = ["contested", "occupier_faction_id", "owner_faction_id", "solar_system_id", "victory_points", "victory_points_threshold"]

    @field_validator('contested')
    def contested_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('captured', 'contested', 'uncontested', 'vulnerable'):
            raise ValueError("must be one of enum values ('captured', 'contested', 'uncontested', 'vulnerable')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetFwSystems200Ok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetFwSystems200Ok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contested": obj.get("contested"),
            "occupier_faction_id": obj.get("occupier_faction_id"),
            "owner_faction_id": obj.get("owner_faction_id"),
            "solar_system_id": obj.get("solar_system_id"),
            "victory_points": obj.get("victory_points"),
            "victory_points_threshold": obj.get("victory_points_threshold")
        })
        return _obj


