# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.get_characters_character_id_clones_home_location import GetCharactersCharacterIdClonesHomeLocation
from esi_client.models.get_characters_character_id_clones_jump_clone import GetCharactersCharacterIdClonesJumpClone
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCharactersCharacterIdClonesOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    home_location: Optional[GetCharactersCharacterIdClonesHomeLocation] = None
    jump_clones: Annotated[List[GetCharactersCharacterIdClonesJumpClone], Field(max_length=64)] = Field(description="jump_clones array")
    last_clone_jump_date: Optional[datetime] = Field(default=None, description="last_clone_jump_date string")
    last_station_change_date: Optional[datetime] = Field(default=None, description="last_station_change_date string")
    __properties: ClassVar[List[str]] = ["home_location", "jump_clones", "last_clone_jump_date", "last_station_change_date"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCharactersCharacterIdClonesOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of home_location
        if self.home_location:
            _dict['home_location'] = self.home_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in jump_clones (list)
        _items = []
        if self.jump_clones:
            for _item in self.jump_clones:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jump_clones'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCharactersCharacterIdClonesOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "home_location": GetCharactersCharacterIdClonesHomeLocation.from_dict(obj.get("home_location")) if obj.get("home_location") is not None else None,
            "jump_clones": [GetCharactersCharacterIdClonesJumpClone.from_dict(_item) for _item in obj.get("jump_clones")] if obj.get("jump_clones") is not None else None,
            "last_clone_jump_date": obj.get("last_clone_jump_date"),
            "last_station_change_date": obj.get("last_station_change_date")
        })
        return _obj


