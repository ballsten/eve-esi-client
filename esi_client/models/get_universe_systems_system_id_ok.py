# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.get_universe_systems_system_id_planet import GetUniverseSystemsSystemIdPlanet
from esi_client.models.get_universe_systems_system_id_position import GetUniverseSystemsSystemIdPosition
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetUniverseSystemsSystemIdOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    constellation_id: StrictInt = Field(description="The constellation this solar system is in")
    name: StrictStr = Field(description="name string")
    planets: Optional[Annotated[List[GetUniverseSystemsSystemIdPlanet], Field(max_length=1000)]] = Field(default=None, description="planets array")
    position: GetUniverseSystemsSystemIdPosition
    security_class: Optional[StrictStr] = Field(default=None, description="security_class string")
    security_status: Union[StrictFloat, StrictInt] = Field(description="security_status number")
    star_id: Optional[StrictInt] = Field(default=None, description="star_id integer")
    stargates: Optional[Annotated[List[StrictInt], Field(max_length=25)]] = Field(default=None, description="stargates array")
    stations: Optional[Annotated[List[StrictInt], Field(max_length=25)]] = Field(default=None, description="stations array")
    system_id: StrictInt = Field(description="system_id integer")
    __properties: ClassVar[List[str]] = ["constellation_id", "name", "planets", "position", "security_class", "security_status", "star_id", "stargates", "stations", "system_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetUniverseSystemsSystemIdOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in planets (list)
        _items = []
        if self.planets:
            for _item in self.planets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['planets'] = _items
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetUniverseSystemsSystemIdOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constellation_id": obj.get("constellation_id"),
            "name": obj.get("name"),
            "planets": [GetUniverseSystemsSystemIdPlanet.from_dict(_item) for _item in obj.get("planets")] if obj.get("planets") is not None else None,
            "position": GetUniverseSystemsSystemIdPosition.from_dict(obj.get("position")) if obj.get("position") is not None else None,
            "security_class": obj.get("security_class"),
            "security_status": obj.get("security_status"),
            "star_id": obj.get("star_id"),
            "stargates": obj.get("stargates"),
            "stations": obj.get("stations"),
            "system_id": obj.get("system_id")
        })
        return _obj


