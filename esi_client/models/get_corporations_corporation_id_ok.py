# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCorporationsCorporationIdOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    alliance_id: Optional[StrictInt] = Field(default=None, description="ID of the alliance that corporation is a member of, if any")
    ceo_id: StrictInt = Field(description="ceo_id integer")
    creator_id: StrictInt = Field(description="creator_id integer")
    date_founded: Optional[datetime] = Field(default=None, description="date_founded string")
    description: Optional[StrictStr] = Field(default=None, description="description string")
    faction_id: Optional[StrictInt] = Field(default=None, description="faction_id integer")
    home_station_id: Optional[StrictInt] = Field(default=None, description="home_station_id integer")
    member_count: StrictInt = Field(description="member_count integer")
    name: StrictStr = Field(description="the full name of the corporation")
    shares: Optional[StrictInt] = Field(default=None, description="shares integer")
    tax_rate: Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]] = Field(description="tax_rate number")
    ticker: StrictStr = Field(description="the short name of the corporation")
    url: Optional[StrictStr] = Field(default=None, description="url string")
    war_eligible: Optional[StrictBool] = Field(default=None, description="war_eligible boolean")
    __properties: ClassVar[List[str]] = ["alliance_id", "ceo_id", "creator_id", "date_founded", "description", "faction_id", "home_station_id", "member_count", "name", "shares", "tax_rate", "ticker", "url", "war_eligible"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCorporationsCorporationIdOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCorporationsCorporationIdOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alliance_id": obj.get("alliance_id"),
            "ceo_id": obj.get("ceo_id"),
            "creator_id": obj.get("creator_id"),
            "date_founded": obj.get("date_founded"),
            "description": obj.get("description"),
            "faction_id": obj.get("faction_id"),
            "home_station_id": obj.get("home_station_id"),
            "member_count": obj.get("member_count"),
            "name": obj.get("name"),
            "shares": obj.get("shares"),
            "tax_rate": obj.get("tax_rate"),
            "ticker": obj.get("ticker"),
            "url": obj.get("url"),
            "war_eligible": obj.get("war_eligible")
        })
        return _obj


