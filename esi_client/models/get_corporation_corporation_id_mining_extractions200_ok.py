# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCorporationCorporationIdMiningExtractions200Ok(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    chunk_arrival_time: datetime = Field(description="The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill. ")
    extraction_start_time: datetime = Field(description="The time at which the current extraction was initiated. ")
    moon_id: StrictInt = Field(description="moon_id integer")
    natural_decay_time: datetime = Field(description="The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill. ")
    structure_id: StrictInt = Field(description="structure_id integer")
    __properties: ClassVar[List[str]] = ["chunk_arrival_time", "extraction_start_time", "moon_id", "natural_decay_time", "structure_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCorporationCorporationIdMiningExtractions200Ok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCorporationCorporationIdMiningExtractions200Ok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chunk_arrival_time": obj.get("chunk_arrival_time"),
            "extraction_start_time": obj.get("extraction_start_time"),
            "moon_id": obj.get("moon_id"),
            "natural_decay_time": obj.get("natural_decay_time"),
            "structure_id": obj.get("structure_id")
        })
        return _obj


