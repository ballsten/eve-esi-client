# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetUniverseBloodlines200Ok(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    bloodline_id: StrictInt = Field(description="bloodline_id integer")
    charisma: StrictInt = Field(description="charisma integer")
    corporation_id: StrictInt = Field(description="corporation_id integer")
    description: StrictStr = Field(description="description string")
    intelligence: StrictInt = Field(description="intelligence integer")
    memory: StrictInt = Field(description="memory integer")
    name: StrictStr = Field(description="name string")
    perception: StrictInt = Field(description="perception integer")
    race_id: StrictInt = Field(description="race_id integer")
    ship_type_id: Optional[StrictInt] = Field(description="ship_type_id integer")
    willpower: StrictInt = Field(description="willpower integer")
    __properties: ClassVar[List[str]] = ["bloodline_id", "charisma", "corporation_id", "description", "intelligence", "memory", "name", "perception", "race_id", "ship_type_id", "willpower"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetUniverseBloodlines200Ok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if ship_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.ship_type_id is None and "ship_type_id" in self.model_fields_set:
            _dict['ship_type_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetUniverseBloodlines200Ok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bloodline_id": obj.get("bloodline_id"),
            "charisma": obj.get("charisma"),
            "corporation_id": obj.get("corporation_id"),
            "description": obj.get("description"),
            "intelligence": obj.get("intelligence"),
            "memory": obj.get("memory"),
            "name": obj.get("name"),
            "perception": obj.get("perception"),
            "race_id": obj.get("race_id"),
            "ship_type_id": obj.get("ship_type_id"),
            "willpower": obj.get("willpower")
        })
        return _obj


