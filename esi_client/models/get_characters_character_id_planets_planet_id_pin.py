# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.get_characters_character_id_planets_planet_id_content import GetCharactersCharacterIdPlanetsPlanetIdContent
from esi_client.models.get_characters_character_id_planets_planet_id_extractor_details import GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails
from esi_client.models.get_characters_character_id_planets_planet_id_factory_details import GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCharactersCharacterIdPlanetsPlanetIdPin(BaseModel):
    """
    pin object
    """ # noqa: E501
    contents: Optional[Annotated[List[GetCharactersCharacterIdPlanetsPlanetIdContent], Field(max_length=90)]] = Field(default=None, description="contents array")
    expiry_time: Optional[datetime] = Field(default=None, description="expiry_time string")
    extractor_details: Optional[GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails] = None
    factory_details: Optional[GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails] = None
    install_time: Optional[datetime] = Field(default=None, description="install_time string")
    last_cycle_start: Optional[datetime] = Field(default=None, description="last_cycle_start string")
    latitude: Union[StrictFloat, StrictInt] = Field(description="latitude number")
    longitude: Union[StrictFloat, StrictInt] = Field(description="longitude number")
    pin_id: StrictInt = Field(description="pin_id integer")
    schematic_id: Optional[StrictInt] = Field(default=None, description="schematic_id integer")
    type_id: StrictInt = Field(description="type_id integer")
    __properties: ClassVar[List[str]] = ["contents", "expiry_time", "extractor_details", "factory_details", "install_time", "last_cycle_start", "latitude", "longitude", "pin_id", "schematic_id", "type_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCharactersCharacterIdPlanetsPlanetIdPin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item in self.contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of extractor_details
        if self.extractor_details:
            _dict['extractor_details'] = self.extractor_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of factory_details
        if self.factory_details:
            _dict['factory_details'] = self.factory_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCharactersCharacterIdPlanetsPlanetIdPin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": [GetCharactersCharacterIdPlanetsPlanetIdContent.from_dict(_item) for _item in obj.get("contents")] if obj.get("contents") is not None else None,
            "expiry_time": obj.get("expiry_time"),
            "extractor_details": GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails.from_dict(obj.get("extractor_details")) if obj.get("extractor_details") is not None else None,
            "factory_details": GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails.from_dict(obj.get("factory_details")) if obj.get("factory_details") is not None else None,
            "install_time": obj.get("install_time"),
            "last_cycle_start": obj.get("last_cycle_start"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "pin_id": obj.get("pin_id"),
            "schematic_id": obj.get("schematic_id"),
            "type_id": obj.get("type_id")
        })
        return _obj


