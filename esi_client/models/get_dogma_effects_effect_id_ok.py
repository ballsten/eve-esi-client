# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from esi_client.models.get_dogma_effects_effect_id_modifier import GetDogmaEffectsEffectIdModifier
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetDogmaEffectsEffectIdOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="description string")
    disallow_auto_repeat: Optional[StrictBool] = Field(default=None, description="disallow_auto_repeat boolean")
    discharge_attribute_id: Optional[StrictInt] = Field(default=None, description="discharge_attribute_id integer")
    display_name: Optional[StrictStr] = Field(default=None, description="display_name string")
    duration_attribute_id: Optional[StrictInt] = Field(default=None, description="duration_attribute_id integer")
    effect_category: Optional[StrictInt] = Field(default=None, description="effect_category integer")
    effect_id: StrictInt = Field(description="effect_id integer")
    electronic_chance: Optional[StrictBool] = Field(default=None, description="electronic_chance boolean")
    falloff_attribute_id: Optional[StrictInt] = Field(default=None, description="falloff_attribute_id integer")
    icon_id: Optional[StrictInt] = Field(default=None, description="icon_id integer")
    is_assistance: Optional[StrictBool] = Field(default=None, description="is_assistance boolean")
    is_offensive: Optional[StrictBool] = Field(default=None, description="is_offensive boolean")
    is_warp_safe: Optional[StrictBool] = Field(default=None, description="is_warp_safe boolean")
    modifiers: Optional[Annotated[List[GetDogmaEffectsEffectIdModifier], Field(max_length=100)]] = Field(default=None, description="modifiers array")
    name: Optional[StrictStr] = Field(default=None, description="name string")
    post_expression: Optional[StrictInt] = Field(default=None, description="post_expression integer")
    pre_expression: Optional[StrictInt] = Field(default=None, description="pre_expression integer")
    published: Optional[StrictBool] = Field(default=None, description="published boolean")
    range_attribute_id: Optional[StrictInt] = Field(default=None, description="range_attribute_id integer")
    range_chance: Optional[StrictBool] = Field(default=None, description="range_chance boolean")
    tracking_speed_attribute_id: Optional[StrictInt] = Field(default=None, description="tracking_speed_attribute_id integer")
    __properties: ClassVar[List[str]] = ["description", "disallow_auto_repeat", "discharge_attribute_id", "display_name", "duration_attribute_id", "effect_category", "effect_id", "electronic_chance", "falloff_attribute_id", "icon_id", "is_assistance", "is_offensive", "is_warp_safe", "modifiers", "name", "post_expression", "pre_expression", "published", "range_attribute_id", "range_chance", "tracking_speed_attribute_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetDogmaEffectsEffectIdOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in modifiers (list)
        _items = []
        if self.modifiers:
            for _item in self.modifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['modifiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetDogmaEffectsEffectIdOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "disallow_auto_repeat": obj.get("disallow_auto_repeat"),
            "discharge_attribute_id": obj.get("discharge_attribute_id"),
            "display_name": obj.get("display_name"),
            "duration_attribute_id": obj.get("duration_attribute_id"),
            "effect_category": obj.get("effect_category"),
            "effect_id": obj.get("effect_id"),
            "electronic_chance": obj.get("electronic_chance"),
            "falloff_attribute_id": obj.get("falloff_attribute_id"),
            "icon_id": obj.get("icon_id"),
            "is_assistance": obj.get("is_assistance"),
            "is_offensive": obj.get("is_offensive"),
            "is_warp_safe": obj.get("is_warp_safe"),
            "modifiers": [GetDogmaEffectsEffectIdModifier.from_dict(_item) for _item in obj.get("modifiers")] if obj.get("modifiers") is not None else None,
            "name": obj.get("name"),
            "post_expression": obj.get("post_expression"),
            "pre_expression": obj.get("pre_expression"),
            "published": obj.get("published"),
            "range_attribute_id": obj.get("range_attribute_id"),
            "range_chance": obj.get("range_chance"),
            "tracking_speed_attribute_id": obj.get("tracking_speed_attribute_id")
        })
        return _obj


