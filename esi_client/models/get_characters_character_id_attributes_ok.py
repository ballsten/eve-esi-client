# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCharactersCharacterIdAttributesOk(BaseModel):
    """
    200 ok object
    """ # noqa: E501
    accrued_remap_cooldown_date: Optional[datetime] = Field(default=None, description="Neural remapping cooldown after a character uses remap accrued over time")
    bonus_remaps: Optional[StrictInt] = Field(default=None, description="Number of available bonus character neural remaps")
    charisma: StrictInt = Field(description="charisma integer")
    intelligence: StrictInt = Field(description="intelligence integer")
    last_remap_date: Optional[datetime] = Field(default=None, description="Datetime of last neural remap, including usage of bonus remaps")
    memory: StrictInt = Field(description="memory integer")
    perception: StrictInt = Field(description="perception integer")
    willpower: StrictInt = Field(description="willpower integer")
    __properties: ClassVar[List[str]] = ["accrued_remap_cooldown_date", "bonus_remaps", "charisma", "intelligence", "last_remap_date", "memory", "perception", "willpower"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCharactersCharacterIdAttributesOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCharactersCharacterIdAttributesOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accrued_remap_cooldown_date": obj.get("accrued_remap_cooldown_date"),
            "bonus_remaps": obj.get("bonus_remaps"),
            "charisma": obj.get("charisma"),
            "intelligence": obj.get("intelligence"),
            "last_remap_date": obj.get("last_remap_date"),
            "memory": obj.get("memory"),
            "perception": obj.get("perception"),
            "willpower": obj.get("willpower")
        })
        return _obj


