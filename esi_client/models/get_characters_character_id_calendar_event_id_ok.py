# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetCharactersCharacterIdCalendarEventIdOk(BaseModel):
    """
    Full details of a specific event
    """ # noqa: E501
    var_date: datetime = Field(description="date string", alias="date")
    duration: StrictInt = Field(description="Length in minutes")
    event_id: StrictInt = Field(description="event_id integer")
    importance: StrictInt = Field(description="importance integer")
    owner_id: StrictInt = Field(description="owner_id integer")
    owner_name: StrictStr = Field(description="owner_name string")
    owner_type: StrictStr = Field(description="owner_type string")
    response: StrictStr = Field(description="response string")
    text: StrictStr = Field(description="text string")
    title: StrictStr = Field(description="title string")
    __properties: ClassVar[List[str]] = ["date", "duration", "event_id", "importance", "owner_id", "owner_name", "owner_type", "response", "text", "title"]

    @field_validator('owner_type')
    def owner_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('eve_server', 'corporation', 'faction', 'character', 'alliance'):
            raise ValueError("must be one of enum values ('eve_server', 'corporation', 'faction', 'character', 'alliance')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetCharactersCharacterIdCalendarEventIdOk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetCharactersCharacterIdCalendarEventIdOk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "duration": obj.get("duration"),
            "event_id": obj.get("event_id"),
            "importance": obj.get("importance"),
            "owner_id": obj.get("owner_id"),
            "owner_name": obj.get("owner_name"),
            "owner_type": obj.get("owner_type"),
            "response": obj.get("response"),
            "text": obj.get("text"),
            "title": obj.get("title")
        })
        return _obj


