# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr, field_validator

from typing import List, Optional

from esi_client.models.get_characters_character_id_killmails_recent200_ok import GetCharactersCharacterIdKillmailsRecent200Ok
from esi_client.models.get_corporations_corporation_id_killmails_recent200_ok import GetCorporationsCorporationIdKillmailsRecent200Ok
from esi_client.models.get_killmails_killmail_id_killmail_hash_ok import GetKillmailsKillmailIdKillmailHashOk

from esi_client.api_client import ApiClient
from esi_client.api_response import ApiResponse
from esi_client.rest import RESTResponseType


class KillmailsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_characters_character_id_killmails_recent(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCharactersCharacterIdKillmailsRecent200Ok]:
        """Get a character's recent kills and losses

        Return a list of a character's kills and losses going back 90 days  --- Alternate route: `/dev/characters/{character_id}/killmails/recent/`  Alternate route: `/legacy/characters/{character_id}/killmails/recent/`  Alternate route: `/v1/characters/{character_id}/killmails/recent/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_killmails_recent_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdKillmailsRecent200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_characters_character_id_killmails_recent_with_http_info(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCharactersCharacterIdKillmailsRecent200Ok]]:
        """Get a character's recent kills and losses

        Return a list of a character's kills and losses going back 90 days  --- Alternate route: `/dev/characters/{character_id}/killmails/recent/`  Alternate route: `/legacy/characters/{character_id}/killmails/recent/`  Alternate route: `/v1/characters/{character_id}/killmails/recent/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_killmails_recent_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdKillmailsRecent200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_characters_character_id_killmails_recent_without_preload_content(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a character's recent kills and losses

        Return a list of a character's kills and losses going back 90 days  --- Alternate route: `/dev/characters/{character_id}/killmails/recent/`  Alternate route: `/legacy/characters/{character_id}/killmails/recent/`  Alternate route: `/v1/characters/{character_id}/killmails/recent/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_killmails_recent_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdKillmailsRecent200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_characters_character_id_killmails_recent_serialize(
        self,
        character_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if character_id is not None:
            _path_params['character_id'] = character_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/characters/{character_id}/killmails/recent/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_killmails_recent(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdKillmailsRecent200Ok]:
        """Get a corporation's recent kills and losses

        Get a list of a corporation's kills and losses going back 90 days  --- Alternate route: `/dev/corporations/{corporation_id}/killmails/recent/`  Alternate route: `/legacy/corporations/{corporation_id}/killmails/recent/`  Alternate route: `/v1/corporations/{corporation_id}/killmails/recent/`  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_killmails_recent_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdKillmailsRecent200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_killmails_recent_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdKillmailsRecent200Ok]]:
        """Get a corporation's recent kills and losses

        Get a list of a corporation's kills and losses going back 90 days  --- Alternate route: `/dev/corporations/{corporation_id}/killmails/recent/`  Alternate route: `/legacy/corporations/{corporation_id}/killmails/recent/`  Alternate route: `/v1/corporations/{corporation_id}/killmails/recent/`  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_killmails_recent_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdKillmailsRecent200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_killmails_recent_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a corporation's recent kills and losses

        Get a list of a corporation's kills and losses going back 90 days  --- Alternate route: `/dev/corporations/{corporation_id}/killmails/recent/`  Alternate route: `/legacy/corporations/{corporation_id}/killmails/recent/`  Alternate route: `/v1/corporations/{corporation_id}/killmails/recent/`  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_killmails_recent_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdKillmailsRecent200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_killmails_recent_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/killmails/recent/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_killmails_killmail_id_killmail_hash(
        self,
        killmail_hash: Annotated[StrictStr, Field(description="The killmail hash for verification")],
        killmail_id: Annotated[StrictInt, Field(description="The killmail ID to be queried")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetKillmailsKillmailIdKillmailHashOk:
        """Get a single killmail

        Return a single killmail from its ID and hash  --- Alternate route: `/dev/killmails/{killmail_id}/{killmail_hash}/`  Alternate route: `/legacy/killmails/{killmail_id}/{killmail_hash}/`  Alternate route: `/v1/killmails/{killmail_id}/{killmail_hash}/`  --- This route is cached for up to 30758400 seconds

        :param killmail_hash: The killmail hash for verification (required)
        :type killmail_hash: str
        :param killmail_id: The killmail ID to be queried (required)
        :type killmail_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_killmails_killmail_id_killmail_hash_serialize(
            killmail_hash=killmail_hash,
            killmail_id=killmail_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetKillmailsKillmailIdKillmailHashOk",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '422': "GetKillmailsKillmailIdKillmailHashUnprocessableEntity",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_killmails_killmail_id_killmail_hash_with_http_info(
        self,
        killmail_hash: Annotated[StrictStr, Field(description="The killmail hash for verification")],
        killmail_id: Annotated[StrictInt, Field(description="The killmail ID to be queried")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetKillmailsKillmailIdKillmailHashOk]:
        """Get a single killmail

        Return a single killmail from its ID and hash  --- Alternate route: `/dev/killmails/{killmail_id}/{killmail_hash}/`  Alternate route: `/legacy/killmails/{killmail_id}/{killmail_hash}/`  Alternate route: `/v1/killmails/{killmail_id}/{killmail_hash}/`  --- This route is cached for up to 30758400 seconds

        :param killmail_hash: The killmail hash for verification (required)
        :type killmail_hash: str
        :param killmail_id: The killmail ID to be queried (required)
        :type killmail_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_killmails_killmail_id_killmail_hash_serialize(
            killmail_hash=killmail_hash,
            killmail_id=killmail_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetKillmailsKillmailIdKillmailHashOk",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '422': "GetKillmailsKillmailIdKillmailHashUnprocessableEntity",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_killmails_killmail_id_killmail_hash_without_preload_content(
        self,
        killmail_hash: Annotated[StrictStr, Field(description="The killmail hash for verification")],
        killmail_id: Annotated[StrictInt, Field(description="The killmail ID to be queried")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a single killmail

        Return a single killmail from its ID and hash  --- Alternate route: `/dev/killmails/{killmail_id}/{killmail_hash}/`  Alternate route: `/legacy/killmails/{killmail_id}/{killmail_hash}/`  Alternate route: `/v1/killmails/{killmail_id}/{killmail_hash}/`  --- This route is cached for up to 30758400 seconds

        :param killmail_hash: The killmail hash for verification (required)
        :type killmail_hash: str
        :param killmail_id: The killmail ID to be queried (required)
        :type killmail_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_killmails_killmail_id_killmail_hash_serialize(
            killmail_hash=killmail_hash,
            killmail_id=killmail_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetKillmailsKillmailIdKillmailHashOk",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '422': "GetKillmailsKillmailIdKillmailHashUnprocessableEntity",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_killmails_killmail_id_killmail_hash_serialize(
        self,
        killmail_hash,
        killmail_id,
        datasource,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if killmail_hash is not None:
            _path_params['killmail_hash'] = killmail_hash
        if killmail_id is not None:
            _path_params['killmail_id'] = killmail_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/killmails/{killmail_id}/{killmail_hash}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


