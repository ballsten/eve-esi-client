# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union

from esi_client.models.get_alliances_alliance_id_contacts200_ok import GetAlliancesAllianceIdContacts200Ok
from esi_client.models.get_alliances_alliance_id_contacts_labels200_ok import GetAlliancesAllianceIdContactsLabels200Ok
from esi_client.models.get_characters_character_id_contacts200_ok import GetCharactersCharacterIdContacts200Ok
from esi_client.models.get_characters_character_id_contacts_labels200_ok import GetCharactersCharacterIdContactsLabels200Ok
from esi_client.models.get_corporations_corporation_id_contacts200_ok import GetCorporationsCorporationIdContacts200Ok
from esi_client.models.get_corporations_corporation_id_contacts_labels200_ok import GetCorporationsCorporationIdContactsLabels200Ok

from esi_client.api_client import ApiClient
from esi_client.api_response import ApiResponse
from esi_client.rest import RESTResponseType


class ContactsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_characters_character_id_contacts(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=20, description="A list of contacts to delete")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete contacts

        Bulk delete contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param contact_ids: A list of contacts to delete (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_characters_character_id_contacts_serialize(
            character_id=character_id,
            contact_ids=contact_ids,
            datasource=datasource,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_characters_character_id_contacts_with_http_info(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=20, description="A list of contacts to delete")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete contacts

        Bulk delete contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param contact_ids: A list of contacts to delete (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_characters_character_id_contacts_serialize(
            character_id=character_id,
            contact_ids=contact_ids,
            datasource=datasource,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_characters_character_id_contacts_without_preload_content(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=20, description="A list of contacts to delete")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete contacts

        Bulk delete contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param contact_ids: A list of contacts to delete (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_characters_character_id_contacts_serialize(
            character_id=character_id,
            contact_ids=contact_ids,
            datasource=datasource,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_characters_character_id_contacts_serialize(
        self,
        character_id,
        contact_ids,
        datasource,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'contact_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if character_id is not None:
            _path_params['character_id'] = character_id
        # process the query parameters
        if contact_ids is not None:
            
            _query_params.append(('contact_ids', contact_ids))
            
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/characters/{character_id}/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_alliances_alliance_id_contacts(
        self,
        alliance_id: Annotated[int, Field(strict=True, ge=1, description="An EVE alliance ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetAlliancesAllianceIdContacts200Ok]:
        """Get alliance contacts

        Return contacts of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/`  Alternate route: `/v2/alliances/{alliance_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param alliance_id: An EVE alliance ID (required)
        :type alliance_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alliances_alliance_id_contacts_serialize(
            alliance_id=alliance_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetAlliancesAllianceIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_alliances_alliance_id_contacts_with_http_info(
        self,
        alliance_id: Annotated[int, Field(strict=True, ge=1, description="An EVE alliance ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetAlliancesAllianceIdContacts200Ok]]:
        """Get alliance contacts

        Return contacts of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/`  Alternate route: `/v2/alliances/{alliance_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param alliance_id: An EVE alliance ID (required)
        :type alliance_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alliances_alliance_id_contacts_serialize(
            alliance_id=alliance_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetAlliancesAllianceIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_alliances_alliance_id_contacts_without_preload_content(
        self,
        alliance_id: Annotated[int, Field(strict=True, ge=1, description="An EVE alliance ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get alliance contacts

        Return contacts of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/`  Alternate route: `/v2/alliances/{alliance_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param alliance_id: An EVE alliance ID (required)
        :type alliance_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alliances_alliance_id_contacts_serialize(
            alliance_id=alliance_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetAlliancesAllianceIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_alliances_alliance_id_contacts_serialize(
        self,
        alliance_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if alliance_id is not None:
            _path_params['alliance_id'] = alliance_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/alliances/{alliance_id}/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_alliances_alliance_id_contacts_labels(
        self,
        alliance_id: Annotated[int, Field(strict=True, ge=1, description="An EVE alliance ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetAlliancesAllianceIdContactsLabels200Ok]:
        """Get alliance contact labels

        Return custom labels for an alliance's contacts  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/legacy/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/v1/alliances/{alliance_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param alliance_id: An EVE alliance ID (required)
        :type alliance_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alliances_alliance_id_contacts_labels_serialize(
            alliance_id=alliance_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetAlliancesAllianceIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_alliances_alliance_id_contacts_labels_with_http_info(
        self,
        alliance_id: Annotated[int, Field(strict=True, ge=1, description="An EVE alliance ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetAlliancesAllianceIdContactsLabels200Ok]]:
        """Get alliance contact labels

        Return custom labels for an alliance's contacts  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/legacy/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/v1/alliances/{alliance_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param alliance_id: An EVE alliance ID (required)
        :type alliance_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alliances_alliance_id_contacts_labels_serialize(
            alliance_id=alliance_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetAlliancesAllianceIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_alliances_alliance_id_contacts_labels_without_preload_content(
        self,
        alliance_id: Annotated[int, Field(strict=True, ge=1, description="An EVE alliance ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get alliance contact labels

        Return custom labels for an alliance's contacts  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/legacy/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/v1/alliances/{alliance_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param alliance_id: An EVE alliance ID (required)
        :type alliance_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_alliances_alliance_id_contacts_labels_serialize(
            alliance_id=alliance_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetAlliancesAllianceIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_alliances_alliance_id_contacts_labels_serialize(
        self,
        alliance_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if alliance_id is not None:
            _path_params['alliance_id'] = alliance_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/alliances/{alliance_id}/contacts/labels/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_characters_character_id_contacts(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCharactersCharacterIdContacts200Ok]:
        """Get contacts

        Return contacts of a character  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_contacts_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_characters_character_id_contacts_with_http_info(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCharactersCharacterIdContacts200Ok]]:
        """Get contacts

        Return contacts of a character  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_contacts_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_characters_character_id_contacts_without_preload_content(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get contacts

        Return contacts of a character  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_contacts_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_characters_character_id_contacts_serialize(
        self,
        character_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if character_id is not None:
            _path_params['character_id'] = character_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/characters/{character_id}/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_characters_character_id_contacts_labels(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCharactersCharacterIdContactsLabels200Ok]:
        """Get contact labels

        Return custom labels for a character's contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/labels/`  Alternate route: `/legacy/characters/{character_id}/contacts/labels/`  Alternate route: `/v1/characters/{character_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_contacts_labels_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_characters_character_id_contacts_labels_with_http_info(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCharactersCharacterIdContactsLabels200Ok]]:
        """Get contact labels

        Return custom labels for a character's contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/labels/`  Alternate route: `/legacy/characters/{character_id}/contacts/labels/`  Alternate route: `/v1/characters/{character_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_contacts_labels_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_characters_character_id_contacts_labels_without_preload_content(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get contact labels

        Return custom labels for a character's contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/labels/`  Alternate route: `/legacy/characters/{character_id}/contacts/labels/`  Alternate route: `/v1/characters/{character_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_characters_character_id_contacts_labels_serialize(
            character_id=character_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCharactersCharacterIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_characters_character_id_contacts_labels_serialize(
        self,
        character_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if character_id is not None:
            _path_params['character_id'] = character_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/characters/{character_id}/contacts/labels/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_contacts(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdContacts200Ok]:
        """Get corporation contacts

        Return contacts of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/`  Alternate route: `/v2/corporations/{corporation_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_contacts_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_contacts_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdContacts200Ok]]:
        """Get corporation contacts

        Return contacts of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/`  Alternate route: `/v2/corporations/{corporation_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_contacts_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_contacts_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation contacts

        Return contacts of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/`  Alternate route: `/v2/corporations/{corporation_id}/contacts/`  --- This route is cached for up to 300 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_contacts_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContacts200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_contacts_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_contacts_labels(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdContactsLabels200Ok]:
        """Get corporation contact labels

        Return custom labels for a corporation's contacts  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/legacy/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/v1/corporations/{corporation_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_contacts_labels_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_contacts_labels_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdContactsLabels200Ok]]:
        """Get corporation contact labels

        Return custom labels for a corporation's contacts  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/legacy/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/v1/corporations/{corporation_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_contacts_labels_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_contacts_labels_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation contact labels

        Return custom labels for a corporation's contacts  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/legacy/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/v1/corporations/{corporation_id}/contacts/labels/`  --- This route is cached for up to 300 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_contacts_labels_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContactsLabels200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_contacts_labels_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/contacts/labels/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_characters_character_id_contacts(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        standing: Annotated[Union[Annotated[float, Field(le=10, strict=True, ge=-10)], Annotated[int, Field(le=10, strict=True, ge=-10)]], Field(description="Standing for the contact")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=100, description="A list of contacts")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        label_ids: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=63)]], Field(description="Add custom labels to the new contact")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        watched: Annotated[Optional[StrictBool], Field(description="Whether the contact should be watched, note this is only effective on characters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[int]:
        """Add contacts

        Bulk add contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param standing: Standing for the contact (required)
        :type standing: float
        :param contact_ids: A list of contacts (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param label_ids: Add custom labels to the new contact
        :type label_ids: List[int]
        :param token: Access token to use if unable to set a header
        :type token: str
        :param watched: Whether the contact should be watched, note this is only effective on characters
        :type watched: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_characters_character_id_contacts_serialize(
            character_id=character_id,
            standing=standing,
            contact_ids=contact_ids,
            datasource=datasource,
            label_ids=label_ids,
            token=token,
            watched=watched,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "List[int]",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
            '520': "PostCharactersCharacterIdContactsError520",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_characters_character_id_contacts_with_http_info(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        standing: Annotated[Union[Annotated[float, Field(le=10, strict=True, ge=-10)], Annotated[int, Field(le=10, strict=True, ge=-10)]], Field(description="Standing for the contact")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=100, description="A list of contacts")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        label_ids: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=63)]], Field(description="Add custom labels to the new contact")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        watched: Annotated[Optional[StrictBool], Field(description="Whether the contact should be watched, note this is only effective on characters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[int]]:
        """Add contacts

        Bulk add contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param standing: Standing for the contact (required)
        :type standing: float
        :param contact_ids: A list of contacts (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param label_ids: Add custom labels to the new contact
        :type label_ids: List[int]
        :param token: Access token to use if unable to set a header
        :type token: str
        :param watched: Whether the contact should be watched, note this is only effective on characters
        :type watched: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_characters_character_id_contacts_serialize(
            character_id=character_id,
            standing=standing,
            contact_ids=contact_ids,
            datasource=datasource,
            label_ids=label_ids,
            token=token,
            watched=watched,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "List[int]",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
            '520': "PostCharactersCharacterIdContactsError520",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_characters_character_id_contacts_without_preload_content(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        standing: Annotated[Union[Annotated[float, Field(le=10, strict=True, ge=-10)], Annotated[int, Field(le=10, strict=True, ge=-10)]], Field(description="Standing for the contact")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=100, description="A list of contacts")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        label_ids: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=63)]], Field(description="Add custom labels to the new contact")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        watched: Annotated[Optional[StrictBool], Field(description="Whether the contact should be watched, note this is only effective on characters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add contacts

        Bulk add contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param standing: Standing for the contact (required)
        :type standing: float
        :param contact_ids: A list of contacts (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param label_ids: Add custom labels to the new contact
        :type label_ids: List[int]
        :param token: Access token to use if unable to set a header
        :type token: str
        :param watched: Whether the contact should be watched, note this is only effective on characters
        :type watched: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_characters_character_id_contacts_serialize(
            character_id=character_id,
            standing=standing,
            contact_ids=contact_ids,
            datasource=datasource,
            label_ids=label_ids,
            token=token,
            watched=watched,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "List[int]",
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
            '520': "PostCharactersCharacterIdContactsError520",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_characters_character_id_contacts_serialize(
        self,
        character_id,
        standing,
        contact_ids,
        datasource,
        label_ids,
        token,
        watched,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'contact_ids': '',
            'label_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if character_id is not None:
            _path_params['character_id'] = character_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if label_ids is not None:
            
            _query_params.append(('label_ids', label_ids))
            
        if standing is not None:
            
            _query_params.append(('standing', standing))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if watched is not None:
            
            _query_params.append(('watched', watched))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if contact_ids is not None:
            _body_params = contact_ids


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/characters/{character_id}/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_characters_character_id_contacts(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        standing: Annotated[Union[Annotated[float, Field(le=10, strict=True, ge=-10)], Annotated[int, Field(le=10, strict=True, ge=-10)]], Field(description="Standing for the contact")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=100, description="A list of contacts")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        label_ids: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=63)]], Field(description="Add custom labels to the contact")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        watched: Annotated[Optional[StrictBool], Field(description="Whether the contact should be watched, note this is only effective on characters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Edit contacts

        Bulk edit contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param standing: Standing for the contact (required)
        :type standing: float
        :param contact_ids: A list of contacts (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param label_ids: Add custom labels to the contact
        :type label_ids: List[int]
        :param token: Access token to use if unable to set a header
        :type token: str
        :param watched: Whether the contact should be watched, note this is only effective on characters
        :type watched: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_characters_character_id_contacts_serialize(
            character_id=character_id,
            standing=standing,
            contact_ids=contact_ids,
            datasource=datasource,
            label_ids=label_ids,
            token=token,
            watched=watched,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_characters_character_id_contacts_with_http_info(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        standing: Annotated[Union[Annotated[float, Field(le=10, strict=True, ge=-10)], Annotated[int, Field(le=10, strict=True, ge=-10)]], Field(description="Standing for the contact")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=100, description="A list of contacts")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        label_ids: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=63)]], Field(description="Add custom labels to the contact")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        watched: Annotated[Optional[StrictBool], Field(description="Whether the contact should be watched, note this is only effective on characters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Edit contacts

        Bulk edit contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param standing: Standing for the contact (required)
        :type standing: float
        :param contact_ids: A list of contacts (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param label_ids: Add custom labels to the contact
        :type label_ids: List[int]
        :param token: Access token to use if unable to set a header
        :type token: str
        :param watched: Whether the contact should be watched, note this is only effective on characters
        :type watched: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_characters_character_id_contacts_serialize(
            character_id=character_id,
            standing=standing,
            contact_ids=contact_ids,
            datasource=datasource,
            label_ids=label_ids,
            token=token,
            watched=watched,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_characters_character_id_contacts_without_preload_content(
        self,
        character_id: Annotated[int, Field(strict=True, ge=1, description="An EVE character ID")],
        standing: Annotated[Union[Annotated[float, Field(le=10, strict=True, ge=-10)], Annotated[int, Field(le=10, strict=True, ge=-10)]], Field(description="Standing for the contact")],
        contact_ids: Annotated[List[StrictInt], Field(min_length=1, max_length=100, description="A list of contacts")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        label_ids: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=63)]], Field(description="Add custom labels to the contact")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        watched: Annotated[Optional[StrictBool], Field(description="Whether the contact should be watched, note this is only effective on characters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Edit contacts

        Bulk edit contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 

        :param character_id: An EVE character ID (required)
        :type character_id: int
        :param standing: Standing for the contact (required)
        :type standing: float
        :param contact_ids: A list of contacts (required)
        :type contact_ids: List[int]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param label_ids: Add custom labels to the contact
        :type label_ids: List[int]
        :param token: Access token to use if unable to set a header
        :type token: str
        :param watched: Whether the contact should be watched, note this is only effective on characters
        :type watched: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_characters_character_id_contacts_serialize(
            character_id=character_id,
            standing=standing,
            contact_ids=contact_ids,
            datasource=datasource,
            label_ids=label_ids,
            token=token,
            watched=watched,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_characters_character_id_contacts_serialize(
        self,
        character_id,
        standing,
        contact_ids,
        datasource,
        label_ids,
        token,
        watched,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'contact_ids': '',
            'label_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if character_id is not None:
            _path_params['character_id'] = character_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if label_ids is not None:
            
            _query_params.append(('label_ids', label_ids))
            
        if standing is not None:
            
            _query_params.append(('standing', standing))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if watched is not None:
            
            _query_params.append(('watched', watched))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if contact_ids is not None:
            _body_params = contact_ids


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/characters/{character_id}/contacts/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


