# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr, field_validator

from typing import List, Optional


from esi_client.api_client import ApiClient
from esi_client.api_response import ApiResponse
from esi_client.rest import RESTResponseType


class RoutesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_route_origin_destination(
        self,
        destination: Annotated[StrictInt, Field(description="destination solar system ID")],
        origin: Annotated[StrictInt, Field(description="origin solar system ID")],
        avoid: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=100)]], Field(description="avoid solar system ID(s)")] = None,
        connections: Annotated[Optional[Annotated[List[Annotated[List[StrictInt], Field(min_length=2, max_length=2)]], Field(max_length=100)]], Field(description="connected solar system pairs")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        flag: Annotated[Optional[StrictStr], Field(description="route security preference")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[int]:
        """Get route

        Get the systems between origin and destination  --- Alternate route: `/dev/route/{origin}/{destination}/`  Alternate route: `/legacy/route/{origin}/{destination}/`  Alternate route: `/v1/route/{origin}/{destination}/`  --- This route is cached for up to 86400 seconds

        :param destination: destination solar system ID (required)
        :type destination: int
        :param origin: origin solar system ID (required)
        :type origin: int
        :param avoid: avoid solar system ID(s)
        :type avoid: List[int]
        :param connections: connected solar system pairs
        :type connections: List[List[int]]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param flag: route security preference
        :type flag: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_route_origin_destination_serialize(
            destination=destination,
            origin=origin,
            avoid=avoid,
            connections=connections,
            datasource=datasource,
            flag=flag,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '404': "GetRouteOriginDestinationNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_route_origin_destination_with_http_info(
        self,
        destination: Annotated[StrictInt, Field(description="destination solar system ID")],
        origin: Annotated[StrictInt, Field(description="origin solar system ID")],
        avoid: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=100)]], Field(description="avoid solar system ID(s)")] = None,
        connections: Annotated[Optional[Annotated[List[Annotated[List[StrictInt], Field(min_length=2, max_length=2)]], Field(max_length=100)]], Field(description="connected solar system pairs")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        flag: Annotated[Optional[StrictStr], Field(description="route security preference")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[int]]:
        """Get route

        Get the systems between origin and destination  --- Alternate route: `/dev/route/{origin}/{destination}/`  Alternate route: `/legacy/route/{origin}/{destination}/`  Alternate route: `/v1/route/{origin}/{destination}/`  --- This route is cached for up to 86400 seconds

        :param destination: destination solar system ID (required)
        :type destination: int
        :param origin: origin solar system ID (required)
        :type origin: int
        :param avoid: avoid solar system ID(s)
        :type avoid: List[int]
        :param connections: connected solar system pairs
        :type connections: List[List[int]]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param flag: route security preference
        :type flag: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_route_origin_destination_serialize(
            destination=destination,
            origin=origin,
            avoid=avoid,
            connections=connections,
            datasource=datasource,
            flag=flag,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '404': "GetRouteOriginDestinationNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_route_origin_destination_without_preload_content(
        self,
        destination: Annotated[StrictInt, Field(description="destination solar system ID")],
        origin: Annotated[StrictInt, Field(description="origin solar system ID")],
        avoid: Annotated[Optional[Annotated[List[StrictInt], Field(max_length=100)]], Field(description="avoid solar system ID(s)")] = None,
        connections: Annotated[Optional[Annotated[List[Annotated[List[StrictInt], Field(min_length=2, max_length=2)]], Field(max_length=100)]], Field(description="connected solar system pairs")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        flag: Annotated[Optional[StrictStr], Field(description="route security preference")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get route

        Get the systems between origin and destination  --- Alternate route: `/dev/route/{origin}/{destination}/`  Alternate route: `/legacy/route/{origin}/{destination}/`  Alternate route: `/v1/route/{origin}/{destination}/`  --- This route is cached for up to 86400 seconds

        :param destination: destination solar system ID (required)
        :type destination: int
        :param origin: origin solar system ID (required)
        :type origin: int
        :param avoid: avoid solar system ID(s)
        :type avoid: List[int]
        :param connections: connected solar system pairs
        :type connections: List[List[int]]
        :param datasource: The server name you would like data from
        :type datasource: str
        :param flag: route security preference
        :type flag: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_route_origin_destination_serialize(
            destination=destination,
            origin=origin,
            avoid=avoid,
            connections=connections,
            datasource=datasource,
            flag=flag,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '404': "GetRouteOriginDestinationNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_route_origin_destination_serialize(
        self,
        destination,
        origin,
        avoid,
        connections,
        datasource,
        flag,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'avoid': 'csv',
            'connections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if destination is not None:
            _path_params['destination'] = destination
        if origin is not None:
            _path_params['origin'] = origin
        # process the query parameters
        if avoid is not None:
            
            _query_params.append(('avoid', avoid))
            
        if connections is not None:
            
            _query_params.append(('connections', connections))
            
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if flag is not None:
            
            _query_params.append(('flag', flag))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/route/{origin}/{destination}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


