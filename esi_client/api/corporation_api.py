# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    The version of the OpenAPI document: 1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr, field_validator

from typing import List, Optional

from esi_client.models.get_corporations_corporation_id_alliancehistory200_ok import GetCorporationsCorporationIdAlliancehistory200Ok
from esi_client.models.get_corporations_corporation_id_blueprints200_ok import GetCorporationsCorporationIdBlueprints200Ok
from esi_client.models.get_corporations_corporation_id_containers_logs200_ok import GetCorporationsCorporationIdContainersLogs200Ok
from esi_client.models.get_corporations_corporation_id_divisions_ok import GetCorporationsCorporationIdDivisionsOk
from esi_client.models.get_corporations_corporation_id_facilities200_ok import GetCorporationsCorporationIdFacilities200Ok
from esi_client.models.get_corporations_corporation_id_icons_ok import GetCorporationsCorporationIdIconsOk
from esi_client.models.get_corporations_corporation_id_medals200_ok import GetCorporationsCorporationIdMedals200Ok
from esi_client.models.get_corporations_corporation_id_medals_issued200_ok import GetCorporationsCorporationIdMedalsIssued200Ok
from esi_client.models.get_corporations_corporation_id_members_titles200_ok import GetCorporationsCorporationIdMembersTitles200Ok
from esi_client.models.get_corporations_corporation_id_membertracking200_ok import GetCorporationsCorporationIdMembertracking200Ok
from esi_client.models.get_corporations_corporation_id_ok import GetCorporationsCorporationIdOk
from esi_client.models.get_corporations_corporation_id_roles200_ok import GetCorporationsCorporationIdRoles200Ok
from esi_client.models.get_corporations_corporation_id_roles_history200_ok import GetCorporationsCorporationIdRolesHistory200Ok
from esi_client.models.get_corporations_corporation_id_shareholders200_ok import GetCorporationsCorporationIdShareholders200Ok
from esi_client.models.get_corporations_corporation_id_standings200_ok import GetCorporationsCorporationIdStandings200Ok
from esi_client.models.get_corporations_corporation_id_starbases200_ok import GetCorporationsCorporationIdStarbases200Ok
from esi_client.models.get_corporations_corporation_id_starbases_starbase_id_ok import GetCorporationsCorporationIdStarbasesStarbaseIdOk
from esi_client.models.get_corporations_corporation_id_structures200_ok import GetCorporationsCorporationIdStructures200Ok
from esi_client.models.get_corporations_corporation_id_titles200_ok import GetCorporationsCorporationIdTitles200Ok

from esi_client.api_client import ApiClient
from esi_client.api_response import ApiResponse
from esi_client.rest import RESTResponseType


class CorporationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_corporations_corporation_id(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCorporationsCorporationIdOk:
        """Get corporation information

        Public information about a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/`  Alternate route: `/v5/corporations/{corporation_id}/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdOk",
            '304': None,
            '400': "BadRequest",
            '404': "GetCorporationsCorporationIdNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCorporationsCorporationIdOk]:
        """Get corporation information

        Public information about a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/`  Alternate route: `/v5/corporations/{corporation_id}/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdOk",
            '304': None,
            '400': "BadRequest",
            '404': "GetCorporationsCorporationIdNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation information

        Public information about a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/`  Alternate route: `/v5/corporations/{corporation_id}/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdOk",
            '304': None,
            '400': "BadRequest",
            '404': "GetCorporationsCorporationIdNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_alliancehistory(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdAlliancehistory200Ok]:
        """Get alliance history

        Get a list of all the alliances a corporation has been a member of  --- Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`  Alternate route: `/v3/corporations/{corporation_id}/alliancehistory/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_alliancehistory_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdAlliancehistory200Ok]",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_alliancehistory_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdAlliancehistory200Ok]]:
        """Get alliance history

        Get a list of all the alliances a corporation has been a member of  --- Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`  Alternate route: `/v3/corporations/{corporation_id}/alliancehistory/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_alliancehistory_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdAlliancehistory200Ok]",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_alliancehistory_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get alliance history

        Get a list of all the alliances a corporation has been a member of  --- Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`  Alternate route: `/v3/corporations/{corporation_id}/alliancehistory/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_alliancehistory_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdAlliancehistory200Ok]",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_alliancehistory_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/alliancehistory/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_blueprints(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdBlueprints200Ok]:
        """Get corporation blueprints

        Returns a list of blueprints the corporation owns  --- Alternate route: `/dev/corporations/{corporation_id}/blueprints/`  Alternate route: `/v3/corporations/{corporation_id}/blueprints/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_blueprints_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdBlueprints200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_blueprints_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdBlueprints200Ok]]:
        """Get corporation blueprints

        Returns a list of blueprints the corporation owns  --- Alternate route: `/dev/corporations/{corporation_id}/blueprints/`  Alternate route: `/v3/corporations/{corporation_id}/blueprints/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_blueprints_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdBlueprints200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_blueprints_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation blueprints

        Returns a list of blueprints the corporation owns  --- Alternate route: `/dev/corporations/{corporation_id}/blueprints/`  Alternate route: `/v3/corporations/{corporation_id}/blueprints/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_blueprints_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdBlueprints200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_blueprints_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/blueprints/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_containers_logs(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdContainersLogs200Ok]:
        """Get all corporation ALSC logs

        Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`  Alternate route: `/v3/corporations/{corporation_id}/containers/logs/`  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_containers_logs_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContainersLogs200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_containers_logs_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdContainersLogs200Ok]]:
        """Get all corporation ALSC logs

        Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`  Alternate route: `/v3/corporations/{corporation_id}/containers/logs/`  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_containers_logs_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContainersLogs200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_containers_logs_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all corporation ALSC logs

        Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`  Alternate route: `/v3/corporations/{corporation_id}/containers/logs/`  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_containers_logs_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdContainersLogs200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_containers_logs_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/containers/logs/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_divisions(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCorporationsCorporationIdDivisionsOk:
        """Get corporation divisions

        Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: `/dev/corporations/{corporation_id}/divisions/`  Alternate route: `/v2/corporations/{corporation_id}/divisions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_divisions_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdDivisionsOk",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_divisions_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCorporationsCorporationIdDivisionsOk]:
        """Get corporation divisions

        Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: `/dev/corporations/{corporation_id}/divisions/`  Alternate route: `/v2/corporations/{corporation_id}/divisions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_divisions_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdDivisionsOk",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_divisions_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation divisions

        Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: `/dev/corporations/{corporation_id}/divisions/`  Alternate route: `/v2/corporations/{corporation_id}/divisions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_divisions_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdDivisionsOk",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_divisions_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/divisions/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_facilities(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdFacilities200Ok]:
        """Get corporation facilities

        Return a corporation's facilities  --- Alternate route: `/dev/corporations/{corporation_id}/facilities/`  Alternate route: `/v2/corporations/{corporation_id}/facilities/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_facilities_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdFacilities200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_facilities_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdFacilities200Ok]]:
        """Get corporation facilities

        Return a corporation's facilities  --- Alternate route: `/dev/corporations/{corporation_id}/facilities/`  Alternate route: `/v2/corporations/{corporation_id}/facilities/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_facilities_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdFacilities200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_facilities_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation facilities

        Return a corporation's facilities  --- Alternate route: `/dev/corporations/{corporation_id}/facilities/`  Alternate route: `/v2/corporations/{corporation_id}/facilities/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_facilities_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdFacilities200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_facilities_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/facilities/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_icons(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCorporationsCorporationIdIconsOk:
        """Get corporation icon

        Get the icon urls for a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/icons/`  Alternate route: `/v2/corporations/{corporation_id}/icons/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_icons_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdIconsOk",
            '304': None,
            '400': "BadRequest",
            '404': "GetCorporationsCorporationIdIconsNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_icons_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCorporationsCorporationIdIconsOk]:
        """Get corporation icon

        Get the icon urls for a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/icons/`  Alternate route: `/v2/corporations/{corporation_id}/icons/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_icons_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdIconsOk",
            '304': None,
            '400': "BadRequest",
            '404': "GetCorporationsCorporationIdIconsNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_icons_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation icon

        Get the icon urls for a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/icons/`  Alternate route: `/v2/corporations/{corporation_id}/icons/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_icons_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdIconsOk",
            '304': None,
            '400': "BadRequest",
            '404': "GetCorporationsCorporationIdIconsNotFound",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_icons_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/icons/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_medals(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdMedals200Ok]:
        """Get corporation medals

        Returns a corporation's medals  --- Alternate route: `/dev/corporations/{corporation_id}/medals/`  Alternate route: `/v2/corporations/{corporation_id}/medals/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_medals_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMedals200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_medals_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdMedals200Ok]]:
        """Get corporation medals

        Returns a corporation's medals  --- Alternate route: `/dev/corporations/{corporation_id}/medals/`  Alternate route: `/v2/corporations/{corporation_id}/medals/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_medals_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMedals200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_medals_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation medals

        Returns a corporation's medals  --- Alternate route: `/dev/corporations/{corporation_id}/medals/`  Alternate route: `/v2/corporations/{corporation_id}/medals/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_medals_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMedals200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_medals_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/medals/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_medals_issued(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdMedalsIssued200Ok]:
        """Get corporation issued medals

        Returns medals issued by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`  Alternate route: `/v2/corporations/{corporation_id}/medals/issued/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_medals_issued_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMedalsIssued200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_medals_issued_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdMedalsIssued200Ok]]:
        """Get corporation issued medals

        Returns medals issued by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`  Alternate route: `/v2/corporations/{corporation_id}/medals/issued/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_medals_issued_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMedalsIssued200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_medals_issued_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation issued medals

        Returns medals issued by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`  Alternate route: `/v2/corporations/{corporation_id}/medals/issued/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_medals_issued_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMedalsIssued200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_medals_issued_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/medals/issued/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_members(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[int]:
        """Get corporation members

        Return the current member list of a corporation, the token's character need to be a member of the corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/members/`  Alternate route: `/v4/corporations/{corporation_id}/members/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_members_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[int]]:
        """Get corporation members

        Return the current member list of a corporation, the token's character need to be a member of the corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/members/`  Alternate route: `/v4/corporations/{corporation_id}/members/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_members_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation members

        Return the current member list of a corporation, the token's character need to be a member of the corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/members/`  Alternate route: `/v4/corporations/{corporation_id}/members/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_members_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/members/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_members_limit(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> int:
        """Get corporation member limit

        Return a corporation's member limit, not including CEO himself  --- Alternate route: `/dev/corporations/{corporation_id}/members/limit/`  Alternate route: `/v2/corporations/{corporation_id}/members/limit/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_limit_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "int",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_members_limit_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[int]:
        """Get corporation member limit

        Return a corporation's member limit, not including CEO himself  --- Alternate route: `/dev/corporations/{corporation_id}/members/limit/`  Alternate route: `/v2/corporations/{corporation_id}/members/limit/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_limit_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "int",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_members_limit_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation member limit

        Return a corporation's member limit, not including CEO himself  --- Alternate route: `/dev/corporations/{corporation_id}/members/limit/`  Alternate route: `/v2/corporations/{corporation_id}/members/limit/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_limit_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "int",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_members_limit_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/members/limit/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_members_titles(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdMembersTitles200Ok]:
        """Get corporation's members' titles

        Returns a corporation's members' titles  --- Alternate route: `/dev/corporations/{corporation_id}/members/titles/`  Alternate route: `/v2/corporations/{corporation_id}/members/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_titles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMembersTitles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_members_titles_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdMembersTitles200Ok]]:
        """Get corporation's members' titles

        Returns a corporation's members' titles  --- Alternate route: `/dev/corporations/{corporation_id}/members/titles/`  Alternate route: `/v2/corporations/{corporation_id}/members/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_titles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMembersTitles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_members_titles_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation's members' titles

        Returns a corporation's members' titles  --- Alternate route: `/dev/corporations/{corporation_id}/members/titles/`  Alternate route: `/v2/corporations/{corporation_id}/members/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_members_titles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMembersTitles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_members_titles_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/members/titles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_membertracking(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdMembertracking200Ok]:
        """Track corporation members

        Returns additional information about a corporation's members which helps tracking their activities  --- Alternate route: `/dev/corporations/{corporation_id}/membertracking/`  Alternate route: `/v2/corporations/{corporation_id}/membertracking/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_membertracking_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMembertracking200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_membertracking_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdMembertracking200Ok]]:
        """Track corporation members

        Returns additional information about a corporation's members which helps tracking their activities  --- Alternate route: `/dev/corporations/{corporation_id}/membertracking/`  Alternate route: `/v2/corporations/{corporation_id}/membertracking/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_membertracking_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMembertracking200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_membertracking_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Track corporation members

        Returns additional information about a corporation's members which helps tracking their activities  --- Alternate route: `/dev/corporations/{corporation_id}/membertracking/`  Alternate route: `/v2/corporations/{corporation_id}/membertracking/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_membertracking_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdMembertracking200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_membertracking_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/membertracking/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_roles(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdRoles200Ok]:
        """Get corporation member roles

        Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: `/dev/corporations/{corporation_id}/roles/`  Alternate route: `/v2/corporations/{corporation_id}/roles/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_roles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdRoles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_roles_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdRoles200Ok]]:
        """Get corporation member roles

        Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: `/dev/corporations/{corporation_id}/roles/`  Alternate route: `/v2/corporations/{corporation_id}/roles/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_roles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdRoles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_roles_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation member roles

        Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: `/dev/corporations/{corporation_id}/roles/`  Alternate route: `/v2/corporations/{corporation_id}/roles/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_roles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdRoles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_roles_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/roles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_roles_history(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdRolesHistory200Ok]:
        """Get corporation member roles history

        Return how roles have changed for a coporation's members, up to a month  --- Alternate route: `/dev/corporations/{corporation_id}/roles/history/`  Alternate route: `/v2/corporations/{corporation_id}/roles/history/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_roles_history_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdRolesHistory200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_roles_history_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdRolesHistory200Ok]]:
        """Get corporation member roles history

        Return how roles have changed for a coporation's members, up to a month  --- Alternate route: `/dev/corporations/{corporation_id}/roles/history/`  Alternate route: `/v2/corporations/{corporation_id}/roles/history/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_roles_history_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdRolesHistory200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_roles_history_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation member roles history

        Return how roles have changed for a coporation's members, up to a month  --- Alternate route: `/dev/corporations/{corporation_id}/roles/history/`  Alternate route: `/v2/corporations/{corporation_id}/roles/history/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_roles_history_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdRolesHistory200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_roles_history_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/roles/history/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_shareholders(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdShareholders200Ok]:
        """Get corporation shareholders

        Return the current shareholders of a corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/shareholders/`  Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`  Alternate route: `/v1/corporations/{corporation_id}/shareholders/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_shareholders_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdShareholders200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_shareholders_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdShareholders200Ok]]:
        """Get corporation shareholders

        Return the current shareholders of a corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/shareholders/`  Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`  Alternate route: `/v1/corporations/{corporation_id}/shareholders/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_shareholders_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdShareholders200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_shareholders_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation shareholders

        Return the current shareholders of a corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/shareholders/`  Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`  Alternate route: `/v1/corporations/{corporation_id}/shareholders/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_shareholders_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdShareholders200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_shareholders_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/shareholders/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_standings(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdStandings200Ok]:
        """Get corporation standings

        Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/corporations/{corporation_id}/standings/`  Alternate route: `/v2/corporations/{corporation_id}/standings/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_standings_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStandings200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_standings_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdStandings200Ok]]:
        """Get corporation standings

        Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/corporations/{corporation_id}/standings/`  Alternate route: `/v2/corporations/{corporation_id}/standings/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_standings_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStandings200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_standings_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation standings

        Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/corporations/{corporation_id}/standings/`  Alternate route: `/v2/corporations/{corporation_id}/standings/`  --- This route is cached for up to 3600 seconds

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_standings_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStandings200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_standings_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/standings/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_starbases(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdStarbases200Ok]:
        """Get corporation starbases (POSes)

        Returns list of corporation starbases (POSes)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_starbases_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStarbases200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_starbases_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdStarbases200Ok]]:
        """Get corporation starbases (POSes)

        Returns list of corporation starbases (POSes)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_starbases_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStarbases200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_starbases_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation starbases (POSes)

        Returns list of corporation starbases (POSes)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_starbases_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStarbases200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_starbases_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/starbases/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_starbases_starbase_id(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        starbase_id: Annotated[StrictInt, Field(description="An EVE starbase (POS) ID")],
        system_id: Annotated[StrictInt, Field(description="The solar system this starbase (POS) is located in,")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCorporationsCorporationIdStarbasesStarbaseIdOk:
        """Get starbase (POS) detail

        Returns various settings and fuels of a starbase (POS)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/{starbase_id}/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param starbase_id: An EVE starbase (POS) ID (required)
        :type starbase_id: int
        :param system_id: The solar system this starbase (POS) is located in, (required)
        :type system_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_starbases_starbase_id_serialize(
            corporation_id=corporation_id,
            starbase_id=starbase_id,
            system_id=system_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdStarbasesStarbaseIdOk",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_starbases_starbase_id_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        starbase_id: Annotated[StrictInt, Field(description="An EVE starbase (POS) ID")],
        system_id: Annotated[StrictInt, Field(description="The solar system this starbase (POS) is located in,")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCorporationsCorporationIdStarbasesStarbaseIdOk]:
        """Get starbase (POS) detail

        Returns various settings and fuels of a starbase (POS)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/{starbase_id}/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param starbase_id: An EVE starbase (POS) ID (required)
        :type starbase_id: int
        :param system_id: The solar system this starbase (POS) is located in, (required)
        :type system_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_starbases_starbase_id_serialize(
            corporation_id=corporation_id,
            starbase_id=starbase_id,
            system_id=system_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdStarbasesStarbaseIdOk",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_starbases_starbase_id_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        starbase_id: Annotated[StrictInt, Field(description="An EVE starbase (POS) ID")],
        system_id: Annotated[StrictInt, Field(description="The solar system this starbase (POS) is located in,")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get starbase (POS) detail

        Returns various settings and fuels of a starbase (POS)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/{starbase_id}/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param starbase_id: An EVE starbase (POS) ID (required)
        :type starbase_id: int
        :param system_id: The solar system this starbase (POS) is located in, (required)
        :type system_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_starbases_starbase_id_serialize(
            corporation_id=corporation_id,
            starbase_id=starbase_id,
            system_id=system_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCorporationsCorporationIdStarbasesStarbaseIdOk",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_starbases_starbase_id_serialize(
        self,
        corporation_id,
        starbase_id,
        system_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        if starbase_id is not None:
            _path_params['starbase_id'] = starbase_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if system_id is not None:
            
            _query_params.append(('system_id', system_id))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/starbases/{starbase_id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_structures(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Language to use in the response")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language to use in the response, takes precedence over Accept-Language")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdStructures200Ok]:
        """Get corporation structures

        Get a list of corporation structures. This route's version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  --- Alternate route: `/dev/corporations/{corporation_id}/structures/`  Alternate route: `/v4/corporations/{corporation_id}/structures/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Station_Manager 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param accept_language: Language to use in the response
        :type accept_language: str
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param language: Language to use in the response, takes precedence over Accept-Language
        :type language: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_structures_serialize(
            corporation_id=corporation_id,
            accept_language=accept_language,
            datasource=datasource,
            if_none_match=if_none_match,
            language=language,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStructures200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_structures_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Language to use in the response")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language to use in the response, takes precedence over Accept-Language")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdStructures200Ok]]:
        """Get corporation structures

        Get a list of corporation structures. This route's version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  --- Alternate route: `/dev/corporations/{corporation_id}/structures/`  Alternate route: `/v4/corporations/{corporation_id}/structures/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Station_Manager 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param accept_language: Language to use in the response
        :type accept_language: str
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param language: Language to use in the response, takes precedence over Accept-Language
        :type language: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_structures_serialize(
            corporation_id=corporation_id,
            accept_language=accept_language,
            datasource=datasource,
            if_none_match=if_none_match,
            language=language,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStructures200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_structures_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        accept_language: Annotated[Optional[StrictStr], Field(description="Language to use in the response")] = None,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language to use in the response, takes precedence over Accept-Language")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Which page of results to return")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation structures

        Get a list of corporation structures. This route's version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  --- Alternate route: `/dev/corporations/{corporation_id}/structures/`  Alternate route: `/v4/corporations/{corporation_id}/structures/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Station_Manager 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param accept_language: Language to use in the response
        :type accept_language: str
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param language: Language to use in the response, takes precedence over Accept-Language
        :type language: str
        :param page: Which page of results to return
        :type page: int
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_structures_serialize(
            corporation_id=corporation_id,
            accept_language=accept_language,
            datasource=datasource,
            if_none_match=if_none_match,
            language=language,
            page=page,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdStructures200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_structures_serialize(
        self,
        corporation_id,
        accept_language,
        datasource,
        if_none_match,
        language,
        page,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if accept_language is not None:
            _header_params['Accept-Language'] = accept_language
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/structures/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_corporation_id_titles(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetCorporationsCorporationIdTitles200Ok]:
        """Get corporation titles

        Returns a corporation's titles  --- Alternate route: `/dev/corporations/{corporation_id}/titles/`  Alternate route: `/v2/corporations/{corporation_id}/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_titles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdTitles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_corporation_id_titles_with_http_info(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetCorporationsCorporationIdTitles200Ok]]:
        """Get corporation titles

        Returns a corporation's titles  --- Alternate route: `/dev/corporations/{corporation_id}/titles/`  Alternate route: `/v2/corporations/{corporation_id}/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_titles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdTitles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_corporation_id_titles_without_preload_content(
        self,
        corporation_id: Annotated[int, Field(strict=True, ge=1, description="An EVE corporation ID")],
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Access token to use if unable to set a header")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get corporation titles

        Returns a corporation's titles  --- Alternate route: `/dev/corporations/{corporation_id}/titles/`  Alternate route: `/v2/corporations/{corporation_id}/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

        :param corporation_id: An EVE corporation ID (required)
        :type corporation_id: int
        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param token: Access token to use if unable to set a header
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_corporation_id_titles_serialize(
            corporation_id=corporation_id,
            datasource=datasource,
            if_none_match=if_none_match,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetCorporationsCorporationIdTitles200Ok]",
            '304': None,
            '400': "BadRequest",
            '401': "Unauthorized",
            '403': "Forbidden",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_corporation_id_titles_serialize(
        self,
        corporation_id,
        datasource,
        if_none_match,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if corporation_id is not None:
            _path_params['corporation_id'] = corporation_id
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'evesso'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/{corporation_id}/titles/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_corporations_npccorps(
        self,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[int]:
        """Get npc corporations

        Get a list of npc corporations  --- Alternate route: `/dev/corporations/npccorps/`  Alternate route: `/v2/corporations/npccorps/`  --- This route expires daily at 11:05

        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_npccorps_serialize(
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_corporations_npccorps_with_http_info(
        self,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[int]]:
        """Get npc corporations

        Get a list of npc corporations  --- Alternate route: `/dev/corporations/npccorps/`  Alternate route: `/v2/corporations/npccorps/`  --- This route expires daily at 11:05

        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_npccorps_serialize(
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_corporations_npccorps_without_preload_content(
        self,
        datasource: Annotated[Optional[StrictStr], Field(description="The server name you would like data from")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="ETag from a previous request. A 304 will be returned if this matches the current ETag")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get npc corporations

        Get a list of npc corporations  --- Alternate route: `/dev/corporations/npccorps/`  Alternate route: `/v2/corporations/npccorps/`  --- This route expires daily at 11:05

        :param datasource: The server name you would like data from
        :type datasource: str
        :param if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :type if_none_match: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_corporations_npccorps_serialize(
            datasource=datasource,
            if_none_match=if_none_match,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[int]",
            '304': None,
            '400': "BadRequest",
            '420': "ErrorLimited",
            '500': "InternalServerError",
            '503': "ServiceUnavailable",
            '504': "GatewayTimeout",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_corporations_npccorps_serialize(
        self,
        datasource,
        if_none_match,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if datasource is not None:
            
            _query_params.append(('datasource', datasource))
            
        # process the header parameters
        if if_none_match is not None:
            _header_params['If-None-Match'] = if_none_match
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/corporations/npccorps/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


